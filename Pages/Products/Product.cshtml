@page "/products/{id}"
@using SuopCommerce.Models
@model ProductModel
@{
}
<link rel="stylesheet" href="~/css/product.css" asp-append-version="true" />
<script src="/js/product.js" asp-append-version="true"></script>

<div class="product-page-wrapper">
    <div class="product-image-gallery">
        @foreach (var image in Model.images)
        {
            <span>@image.Description</span>
            <img src="@image.Url">
        }
        @if (Model.images.Length == 0)
        {
            <span class="placeholder-image"></span>
        }
    </div>
    <div class="product-info">

        <h1>@Model.product.Name</h1>
        <div class="product-description">@Html.Raw(Model.MarkdownToHtml(Model.product.Description))</div>
        <p>@Model.debug</p>

        @foreach (var extraString in Model.product.Extras)
        {
            var extra = Model.ParseExtra(extraString);
            <div class="product-extra">

                @switch (extra.Type)
                {
                case Extras.Types.PerLetter:

                    <b>@extra.Text</b> <span>(+ $@Model.FormatMoney(extra.Cost) per letter)</span><br>
                    <input type="text" value="" oninput="window.suopProduct.setPerLetter(this.value, `@extra.Id`, @extra.Cost)" />
                    break;
                case Extras.Types.TextField:
                //todo make the hint text below escape quotes
                    <b>@extra.Text</b><br>
                        <style>
                            #@extra.Id:empty:before {
                                content: "@extra.HintText";
                            }
                        </style>
                        <span id="@extra.Id" contenteditable="true" class="extra-text-field" oninput="window.suopProduct.customization.set(`@extra.Id`, this.innerHTML)"></span>
                        break;
                    case Extras.Types.Radio:
                        <div><b>@extra.Text</b></div> 
                        string radioChecked = "checked";
                        //set the default value
                        //todo gracefully handle when no value is passed for a required radio
                        //todo make it handle text hints for the nots and handle the pricing values for radio buttons
                        //todo make it request the user's full address
                        <script defer>
                            addEventListener('DOMContentLoaded', () => {
                                window.suopProduct.setRadioOption(`@extra.Id`, `@extra.RadioOptions!.First().Key`, @extra.RadioOptions!.First().Value)
                            });
                        </script>
                        <span class="extra-radio-wrapper">
                        @foreach(var radioOption in extra.RadioOptions!)
                        {
                                <label
                                    class="extra-radio" 
                                    onclick="window.suopProduct.setRadioOption(`@extra.Id`, `@radioOption.Key`, @radioOption.Value)">@radioOption.Key
                                    <input class="hidden" type="radio" name="@extra.Id" @radioChecked/>
                                </label>
                                //check the first radio button
                            radioChecked = string.Empty;
                        }
                        </span>

                    break;
                case Extras.Types.Invalid:
                    <h1>Invalid extra:</h1> @extra.Text
                    break;
                default:
                    <b>Extra type @extra.Type.ToString() has not yet been implemented.</b>
                    break;
                }
            </div>
        }

        @foreach (var addonId in Model.product.Addons)
        {
            var addon = Model.db.Products.Find(addonId);
            if (addon == null) continue;
            var addonImageUrl = await Model.GetImageUrlAsync(addon.Images.FirstOrDefault());

            <label class="product-addon" onclick="window.suopProduct.toggleAddon(@addon.Id, @addon.Price)">
                <img src="@addonImageUrl" class="addon-image" />
                <span class="addon-text">
                    <span>
                        <b>@addon.Name</b> (+ <span class="price">@Model.FormatMoney(addon.Price)</span>)
                    </span>
                    <br>
                    <span>@addon.Description</span>
                </span>

                <input type="checkbox" id="addon-@addon.Id" />

            </label>
        }


        <h1 id="final-price" class="">$@Model.FormatMoney(Model.product.Price)</h1>
        <button class="rounded-square-button" onclick="window.suopProduct.addToCart()">Buy now</button>

        <script defer>
            addEventListener('DOMContentLoaded', () => {
                window.suopProduct.basePrice = @Model.product.Price
                    window.suopProduct.id = @Model.product.Id
                    window.suopProduct.refreshPrice()
                        });
        </script>
    </div>

</div>
